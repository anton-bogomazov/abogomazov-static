<!DOCTYPE html><html lang="en-GB"><head><meta charset="utf-8"><meta name="viewport" content="width=device-width, initial-scale=1.0, shrink-to-fit=no"><meta http-equiv="X-UA-Compatible" content="IE=edge"><title>Unit Testing Essentials: Definition • Anton Bogomazov | Software Engineer</title><!-- Icons / Favicon --><link rel="icon" href="/favicon.ico" sizes="any"><link rel="icon" href="/icon.svg" type="image/svg+xml"><link rel="apple-touch-icon" href="/apple-touch-icon.png"><link rel="manifest" href="/manifest.webmanifest"><link rel="canonical" href="https://abogomazov.com/posts/testing-essentials-1/"><!-- Primary Meta Tags --><meta name="title" content="Unit Testing Essentials: Definition • Anton Bogomazov | Software Engineer"><meta name="description" content="This article addresses the common misuse of unit testing terms and examines opposing methodologies."><meta name="author" content="Anton Bogomazov"><!-- Theme Colour --><meta name="theme-color" content="#fafafa"><!-- Open Graph / Facebook --><meta property="og:type" content="article"><meta property="og:title" content="Unit Testing Essentials: Definition"><meta property="og:description" content="This article addresses the common misuse of unit testing terms and examines opposing methodologies."><meta property="og:url" content="https://abogomazov.com/posts/testing-essentials-1/"><meta property="og:site_name" content="Anton Bogomazov | Software Engineer"><meta property="og:locale" content="en_GB"><meta property="og:image" content="https://abogomazov.com/og-image/testing-essentials-1.png"><meta property="og:image:width" content="1200"><meta property="og:image:height" content="630"><meta property="article:author" content="Anton Bogomazov"><meta property="article:published_time" content="2023-08-19T00:00:00.000Z"><!-- Twitter --><meta property="twitter:card" content="summary_large_image"><meta property="twitter:url" content="https://abogomazov.com/posts/testing-essentials-1/"><meta property="twitter:title" content="Unit Testing Essentials: Definition"><meta property="twitter:description" content="This article addresses the common misuse of unit testing terms and examines opposing methodologies."><meta property="twitter:image" content="https://abogomazov.com/og-image/testing-essentials-1.png"><!-- RSS auto-discovery --><link rel="alternate" type="application/rss+xml" title="Anton Bogomazov | Software Engineer" href="/rss.xml"><script async src="https://www.googletagmanager.com/gtag/js?id=G-RC1XFJKFC9">
  // _
</script><script>(function(){const id = "G-RC1XFJKFC9";

  (() => {
    window.dataLayer = window.dataLayer || [];
    function gtag() {
      dataLayer.push(arguments);
    }
    gtag('js', new Date());
    gtag('config', id);
  })();
})();</script><link rel="stylesheet" href="/_astro/_slug_.195f1d6d.css" /><script type="module" src="/_astro/hoisted.f100d270.js"></script>
<script type="module" src="/_astro/page.756ffed2.js"></script></head><body><script>(function(){const themeColorDark = "#1d1f21";
const themeColorLight = "#fafafa";

	const root = document.documentElement;
	const colorThemeMetaTag = document.querySelector("meta[name='theme-color']");
	const storedTheme = typeof localStorage !== "undefined" && localStorage.getItem("theme");
	const userTheme =
		storedTheme || (window.matchMedia("(prefers-color-scheme: light)").matches ? "light" : "dark");
	function setTheme(theme) {
		root.classList.toggle("dark", theme === "dark");
		colorThemeMetaTag.setAttribute("content", theme === "dark" ? themeColorDark : themeColorLight);
		if (typeof localStorage !== "undefined") {
			localStorage.setItem("theme", theme);
		}
	}
	setTheme(userTheme);
	root.addEventListener("theme-change", (e) => {
		setTheme(e.detail.theme);
	});
})();</script><a href="#main" class="sr-only focus:not-sr-only focus:fixed focus:start-1 focus:top-1.5">skip to content
</a><header id="main-header" class="group relative mb-28 flex items-center"><div class="flex sm:flex-col"><a href="/" class="inline-flex items-center grayscale hover:filter-none sm:relative sm:inline-block"><span class="text-xl font-bold sm:text-2xl">Anton Bogomazov</span></a><nav id="navigation-menu" class="absolute -inset-x-4 top-14 hidden flex-col items-end gap-y-4 rounded-md bg-[--theme-menu-bg] py-4 text-accent shadow backdrop-blur group-[.menu-open]:z-50 group-[.menu-open]:flex sm:static sm:z-auto sm:-ms-4 sm:mt-1 sm:flex sm:flex-row sm:items-center sm:divide-x sm:divide-dashed sm:divide-accent sm:rounded-none sm:bg-transparent sm:py-0 sm:shadow-none sm:backdrop-blur-none" aria-label="Main menu"><a href="/" class="px-4 py-4 sm:py-0 sm:hover:underline" rel="prefetch">Home</a><a href="/experience" class="px-4 py-4 sm:py-0 sm:hover:underline" rel="prefetch">Experience</a><a href="/posts/" class="px-4 py-4 sm:py-0 sm:hover:underline" rel="prefetch">Blog</a></nav></div><site-search id="search" class="ms-auto astro-OTPDT6JM"><button data-open-modal disabled class="flex h-9 w-9 items-center justify-center rounded-md ring-zinc-400 transition-all hover:ring-2 astro-OTPDT6JM"><svg aria-label="search" class="h-6 w-6 astro-OTPDT6JM" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"><path stroke="none" d="M0 0h24v24H0z" class="astro-OTPDT6JM"></path><path d="M3 10a7 7 0 1 0 14 0 7 7 0 1 0-14 0M21 21l-6-6" class="astro-OTPDT6JM"></path></svg></button><dialog aria-label="search" class="h-full max-h-full w-full max-w-full border border-zinc-400 bg-[--theme-bg] shadow backdrop:bg-[--theme-menu-bg] backdrop:backdrop-blur sm:mx-auto sm:mb-auto sm:mt-16 sm:h-max sm:max-h-[calc(100%-8rem)] sm:min-h-[15rem] sm:w-5/6 sm:max-w-[48rem] sm:rounded-md astro-OTPDT6JM"><div class="dialog-frame flex flex-col gap-4 p-6 pt-12 sm:pt-6 astro-OTPDT6JM"><button data-close-modal class="ms-auto cursor-pointer rounded-md bg-zinc-200 p-2 font-semibold dark:bg-zinc-700 astro-OTPDT6JM">Close</button><div class="search-container astro-OTPDT6JM"><div id="cactus__search" class="astro-OTPDT6JM"></div></div></div></dialog></site-search><theme-toggle class="ms-2 sm:ms-4"><button type="button" id="toggle-theme" class="group relative h-9 w-9 rounded-md bg-zinc-200 p-2 ring-zinc-400 transition-all hover:ring-2 dark:bg-zinc-700" aria-label="Toggle Dark Mode"><svg id="sun-svg" class="absolute start-1/2 top-1/2 h-7 w-7 -translate-x-1/2 -translate-y-1/2 scale-0 opacity-0 transition-all group-aria-pressed:scale-100 group-aria-pressed:opacity-100" aria-hidden="true" focusable="false" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M12 18C15.3137 18 18 15.3137 18 12C18 8.68629 15.3137 6 12 6C8.68629 6 6 8.68629 6 12C6 15.3137 8.68629 18 12 18Z" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"></path><path d="M22 12L23 12" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"></path><path d="M12 2V1" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"></path><path d="M12 23V22" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"></path><path d="M20 20L19 19" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"></path><path d="M20 4L19 5" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"></path><path d="M4 20L5 19" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"></path><path d="M4 4L5 5" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"></path><path d="M1 12L2 12" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"></path></svg><svg id="moon-svg" class="absolute start-1/2 top-1/2 h-7 w-7 -translate-x-1/2 -translate-y-1/2 scale-0 opacity-0 transition-all group-aria-[pressed=false]:scale-100 group-aria-[pressed=false]:opacity-100" aria-hidden="true" focusable="false" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M3.39703 11.6315C3.39703 16.602 7.42647 20.6315 12.397 20.6315C15.6858 20.6315 18.5656 18.8664 20.1358 16.23C16.7285 17.3289 12.6922 16.7548 9.98282 14.0455C7.25201 11.3146 6.72603 7.28415 7.86703 3.89293C5.20697 5.47927 3.39703 8.38932 3.39703 11.6315ZM21.187 13.5851C22.0125 13.1021 23.255 13.6488 23 14.5706C21.7144 19.2187 17.4543 22.6315 12.397 22.6315C6.3219 22.6315 1.39703 17.7066 1.39703 11.6315C1.39703 6.58874 4.93533 2.25845 9.61528 0.999986C10.5393 0.751502 11.0645 1.99378 10.5641 2.80935C8.70026 5.84656 8.83194 10.0661 11.397 12.6312C13.9319 15.1662 18.1365 15.3702 21.187 13.5851Z" fill="#0F0F0F"></path></svg></button></theme-toggle><script>
	const bodyThemeIsDark = document.documentElement.classList.contains("dark");
	const button = document.getElementById("toggle-theme");
	button.setAttribute("aria-pressed", String(bodyThemeIsDark));
</script><button id="toggle-navigation-menu" class="group relative ms-4 h-7 w-7 sm:invisible sm:hidden" type="button" aria-label="Open main menu" aria-expanded="false" aria-haspopup="menu"><svg id="line-svg" class="absolute start-1/2 top-1/2 h-full w-full -translate-x-1/2 -translate-y-1/2 transition-all group-aria-expanded:scale-0 group-aria-expanded:opacity-0" aria-hidden="true" focusable="false" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M3.75 9h16.5m-16.5 6.75h16.5"></path></svg><svg id="cross-svg" class="absolute start-1/2 top-1/2 h-full w-full -translate-x-1/2 -translate-y-1/2 scale-0 text-accent opacity-0 transition-all group-aria-expanded:scale-100 group-aria-expanded:opacity-100" class="text-accent" aria-hidden="true" focusable="false" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12"></path></svg></button></header><main id="main" class="flex-1"><div class="gap-x-10 lg:flex lg:items-start"><aside class="sticky top-20 order-2 -me-32 hidden basis-64 lg:block"><h2 class="font-semibold">Table of Contents</h2><ul class="mt-4 text-xs"><li class="line-clamp-2 hover:text-accent"><a class="block mt-3" href="#introduction" aria-label="Scroll to section: Introduction"><span class="me-1">##</span>Introduction</a></li><li class="line-clamp-2 hover:text-accent"><a class="block mt-2 ps-3 text-[0.6875rem]" href="#terms" aria-label="Scroll to section: Terms"><span class="me-1">###</span>Terms</a></li><li class="line-clamp-2 hover:text-accent"><a class="block mt-3" href="#what-is-the-unit-test" aria-label="Scroll to section: What is the Unit Test?"><span class="me-1">##</span>What is the Unit Test?</a></li><li class="line-clamp-2 hover:text-accent"><a class="block mt-3" href="#two-views-on-unit-testing" aria-label="Scroll to section: Two views on Unit Testing"><span class="me-1">##</span>Two views on Unit Testing</a></li><li class="line-clamp-2 hover:text-accent"><a class="block mt-2 ps-3 text-[0.6875rem]" href="#sociable-unit-test" aria-label="Scroll to section: Sociable Unit Test"><span class="me-1">###</span>Sociable Unit Test</a></li><li class="line-clamp-2 hover:text-accent"><a class="block mt-2 ps-3 text-[0.6875rem]" href="#solitary-unit-test" aria-label="Scroll to section: Solitary Unit Test"><span class="me-1">###</span>Solitary Unit Test</a></li><li class="line-clamp-2 hover:text-accent"><a class="block mt-3" href="#conclusion" aria-label="Scroll to section: Conclusion"><span class="me-1">##</span>Conclusion</a></li><li class="line-clamp-2 hover:text-accent"><a class="block mt-3" href="#references" aria-label="Scroll to section: References"><span class="me-1">##</span>References</a></li></ul></aside><article class="flex-grow break-words" data-pagefind-body><div id="blog-hero"><h1 class="title mb-3 sm:mb-1">Unit Testing Essentials: Definition</h1><time datetime="2023-08-19T00:00:00.000Z">19 August 2023</time><div class="mt-1 sm:mt-0 sm:inline sm:before:mx-2 sm:before:content-['|']"><svg aria-hidden="true" focusable="false" xmlns="http://www.w3.org/2000/svg" class="me-1 inline-block h-6 w-6" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M7.859 6h-2.834a2.025 2.025 0 0 0 -2.025 2.025v2.834c0 .537 .213 1.052 .593 1.432l6.116 6.116a2.025 2.025 0 0 0 2.864 0l2.834 -2.834a2.025 2.025 0 0 0 0 -2.864l-6.117 -6.116a2.025 2.025 0 0 0 -1.431 -.593z"></path><path d="M17.573 18.407l2.834 -2.834a2.025 2.025 0 0 0 0 -2.864l-7.117 -7.116"></path><path d="M6 9h-.01"></path></svg><a class="cactus-link inline-block before:content-['#']" aria-label="View more blogs with the tag testing" href="/tags/testing/" data-pagefind-filter="tag">testing</a>, <a class="cactus-link inline-block before:content-['#']" aria-label="View more blogs with the tag engineering" href="/tags/engineering/" data-pagefind-filter="tag">engineering</a>, <a class="cactus-link inline-block before:content-['#']" aria-label="View more blogs with the tag unit testing" href="/tags/unit testing/" data-pagefind-filter="tag">unit testing</a></div><p class="mt-8">This article addresses the common misuse of unit testing terms and examines opposing methodologies.</p></div><div class="prose prose-sm prose-cactus mt-12 prose-headings:font-semibold prose-headings:before:absolute prose-headings:before:-ms-4 prose-headings:before:text-accent prose-headings:before:content-['#'] prose-th:before:content-none"><h2 id="introduction">Introduction</h2>
<p>There is a noticeable trend in the software development field: terms commonly associated with unit testing are often misapplied.
The associated methodologies and practices are also often misused.
At the same time, many institutions assume that developers have sufficient knowledge about testing.
This assumption may be due to a historical perspective where testing was seen as an auxiliary element of a project - a task that had to be handled “somehow”.
Symbolically, code coverage became the sole criterion for evaluating the quality of testing for many projects, which is not considered adequate.</p>
<p>I believe it’s important to have a solid understanding of unit testing because a good test suite is one of the pillars of a project’s agility.
This is exactly the kind of quality we’re aiming for in our fast-paced world of elusive business opportunities.</p>
<h3 id="terms">Terms</h3>
<p><strong>Regression</strong> (<strong>software bug</strong>) is a situation when a feature stops functioning as intended after modifications have been applied.</p>
<p><strong>System Under Test (SUT)</strong> is what is being tested.</p>
<p><strong>Test Double</strong> is a production object substitute for testing purposes.</p>
<h2 id="what-is-the-unit-test">What is the Unit Test?</h2>
<p><strong>Unit test</strong> is a piece of code (test method) that triggers another piece of code (SUT) and assesses the correctness of specific assumptions afterward (assertions).
If these assumptions are proven incorrect, the unit test is considered to be failed.</p>
<p>This general definition is not very helpful in navigating modern testing because it doesn’t allow us to separate the different categories of tests.
Also, it does not indicate that unit tests are automated. Therefore, I prefer the stricter one given by Vladimir Khorikov [1]:</p>
<blockquote>
<p>Unit test is an automated test that:</p>
<ul>
<li>Verifies a single unit of behavior</li>
<li>Does it quickly</li>
<li>Does it in isolation from other tests</li>
</ul>
</blockquote>
<p>Here we would like to emphasize that <em>unit testing of sole integration with infrastructure is not integration testing</em> by definition. [1] [2]</p>
<p>It is often very difficult to write such a test meeting the last 2 criteria, and also usually the logic of such integrations is trivial,
so such interactions are tested as part of other tests at higher levels (integration, e2e).</p>
<p>Now, let’s delve into the concepts of “unit” and “isolation”.
To grasp these concepts, we need to explore 2 approaches, as they define these terms differently.</p>
<h2 id="two-views-on-unit-testing">Two views on Unit Testing</h2>
<p>When discussing the two schools unit testing, I will utilize the terms coined by Jay Fields, as I consider them to be the most accurate.
Furthermore, I will present all the names under which you might encounter these terms.</p>
<h3 id="sociable-unit-test">Sociable Unit Test</h3>
<p>Verifies a single <em>unit of behavior</em> in <em>isolation from other tests</em>.</p>
<ul>
<li>Also known as: Detroit/Chicago school of unit testing, classicist approach, state-based/inside-out/black-box testing.</li>
<li>Practitioners: Kent Beck, Martin Fowler, Robert Martin.</li>
</ul>
<p>Description:</p>
<ul>
<li>A unit of behavior can be a command or a business transaction.</li>
<li>SUT is the class under test with all its private dependencies.</li>
<li>Isolation of tests from each other. Avoid a situation where 2 tests from one suite could interfere with each other by mutating shared dependency.</li>
<li>Can be described as “passing X and Y to SUT, I expect the result R”.</li>
<li>Shared out-of-process [classic] OR shared <em>unmanaged</em> out-of-process [modern] dependencies should be mocked. [3]</li>
</ul>
<p>Example:</p>
<pre is:raw="" class="astro-code dracula" style="background-color: #282A36; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;" tabindex="0"><code><span class="line"><span style="color: #F1FA8C">"lock account and notify user after 3 failed authorization attempts"</span><span style="color: #F8F8F2"> {</span></span>
<span class="line"><span style="color: #F8F8F2">    </span><span style="color: #FF79C6">val</span><span style="color: #F8F8F2"> database </span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B">testDatabase</span><span style="color: #F8F8F2">()</span></span>
<span class="line"><span style="color: #F8F8F2">    </span><span style="color: #FF79C6">val</span><span style="color: #F8F8F2"> messageBusMock </span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B">mockk</span><span style="color: #F8F8F2">&#x3C;</span><span style="color: #8BE9FD; font-style: italic">MessageBus</span><span style="color: #F8F8F2">>()</span></span>
<span class="line"><span style="color: #F8F8F2">    </span><span style="color: #FF79C6">val</span><span style="color: #F8F8F2"> notificator </span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B">Notificator</span><span style="color: #F8F8F2">(messageBusMock)</span></span>
<span class="line"><span style="color: #F8F8F2">    </span><span style="color: #FF79C6">val</span><span style="color: #F8F8F2"> repository </span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B">Repository</span><span style="color: #F8F8F2">(database)</span></span>
<span class="line"><span style="color: #F8F8F2">    </span><span style="color: #FF79C6">val</span><span style="color: #F8F8F2"> sut </span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B">AuthorizationManager</span><span style="color: #F8F8F2">(notificator, repository)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F8F8F2">    </span><span style="color: #FF79C6">val</span><span style="color: #F8F8F2"> result </span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2"> sut.</span><span style="color: #50FA7B">authorize</span><span style="color: #F8F8F2">(userId </span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2"> </span><span style="color: #BD93F9">15</span><span style="color: #F8F8F2">, authData </span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B">authData</span><span style="color: #F8F8F2">())</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F8F8F2">    result shouldBe </span><span style="color: #BD93F9">false</span></span>
<span class="line"><span style="color: #F8F8F2">    repository.</span><span style="color: #50FA7B">isUserBlocked</span><span style="color: #F8F8F2">(userId </span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2"> </span><span style="color: #BD93F9">15</span><span style="color: #F8F8F2">) shouldBe </span><span style="color: #BD93F9">true</span></span>
<span class="line"><span style="color: #F8F8F2">    </span><span style="color: #50FA7B">verify</span><span style="color: #F8F8F2">(exactly </span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2"> </span><span style="color: #BD93F9">1</span><span style="color: #F8F8F2">) { messageBusMock.</span><span style="color: #50FA7B">sendEvent</span><span style="color: #F8F8F2">(</span><span style="color: #50FA7B">alertEvent</span><span style="color: #F8F8F2">(userId </span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2"> </span><span style="color: #BD93F9">15</span><span style="color: #F8F8F2">)) }</span></span>
<span class="line"><span style="color: #F8F8F2">}</span></span></code></pre>
<p>I use a single mock for the unmanaged MessageBus, as it is the only dependency whose state I cannot observe from the application.
The other collaborators are configured exclusively for each test.</p>
<p>Effects:</p>
<ul>
<li>Written tests make sense: I invoke the command, I get the result.</li>
<li>Focus shifts from implementation to behavior.</li>
<li>Not tied to implementation details -> resistant to refactoring. Sometimes knowing just the name of the method being tested may be enough.</li>
<li>Tests the logic of a cluster of classes (SUT + dependencies).</li>
<li>In case of regression, fail in multiple tests. For example, if bug in some class, dependent classes are likely to fail as well.</li>
</ul>
<h3 id="solitary-unit-test">Solitary Unit Test</h3>
<p>Verifies a single <em>unit of code</em> in <em>isolation from any dependencies</em>.</p>
<ul>
<li>Also known as: London school of unit testing, mockist approach, interaction-based/outside-in/white-box testing</li>
<li>Practitioners: Steve Freeman, Nat Pryce.</li>
</ul>
<p>Description:</p>
<ul>
<li>A unit of code is SUT.</li>
<li><em>Complete</em> isolation of SUT from <em>any</em> dependencies. Dependencies are replaced by Test Doubles.</li>
<li>Can be described as “passing X and Y to SUT, I expect invocation of methods F1 of collaborator A and F2 of collaborator B with arguments ARG1 and ARG2”.</li>
</ul>
<p>Example:</p>
<pre is:raw="" class="astro-code dracula" style="background-color: #282A36; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;" tabindex="0"><code><span class="line"><span style="color: #F1FA8C">"lock account and notify user after 3 failed authorization attempts"</span><span style="color: #F8F8F2"> {</span></span>
<span class="line"><span style="color: #F8F8F2">    </span><span style="color: #FF79C6">val</span><span style="color: #F8F8F2"> notificatorMock </span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B">mockk</span><span style="color: #F8F8F2">&#x3C;</span><span style="color: #8BE9FD; font-style: italic">Notificator</span><span style="color: #F8F8F2">>()</span></span>
<span class="line"><span style="color: #F8F8F2">    </span><span style="color: #50FA7B">every</span><span style="color: #F8F8F2"> { notificatorMock.</span><span style="color: #50FA7B">sendAlert</span><span style="color: #F8F8F2">(</span><span style="color: #50FA7B">alertEvent</span><span style="color: #F8F8F2">(userId </span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2"> </span><span style="color: #BD93F9">15</span><span style="color: #F8F8F2">)) }.</span><span style="color: #50FA7B">returns</span><span style="color: #F8F8F2">(</span><span style="color: #BD93F9">true</span><span style="color: #F8F8F2">)</span></span>
<span class="line"><span style="color: #F8F8F2">    </span><span style="color: #FF79C6">val</span><span style="color: #F8F8F2"> repositoryMock </span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B">mockk</span><span style="color: #F8F8F2">&#x3C;</span><span style="color: #8BE9FD; font-style: italic">Repository</span><span style="color: #F8F8F2">>()</span></span>
<span class="line"><span style="color: #F8F8F2">    </span><span style="color: #50FA7B">every</span><span style="color: #F8F8F2"> { repositoryMock.</span><span style="color: #50FA7B">blockAccount</span><span style="color: #F8F8F2">(userId </span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2"> </span><span style="color: #BD93F9">15</span><span style="color: #F8F8F2">) }.</span><span style="color: #50FA7B">returns</span><span style="color: #F8F8F2">(</span><span style="color: #BD93F9">true</span><span style="color: #F8F8F2">)</span></span>
<span class="line"><span style="color: #F8F8F2">    </span><span style="color: #FF79C6">val</span><span style="color: #F8F8F2"> sut </span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B">AuthorizationManager</span><span style="color: #F8F8F2">(notificatorMock, repositoryMock)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F8F8F2">    </span><span style="color: #FF79C6">val</span><span style="color: #F8F8F2"> result </span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2"> sut.</span><span style="color: #50FA7B">authorize</span><span style="color: #F8F8F2">(userId </span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2"> </span><span style="color: #BD93F9">15</span><span style="color: #F8F8F2">, authData </span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B">authData</span><span style="color: #F8F8F2">())</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F8F8F2">    result shouldBe </span><span style="color: #BD93F9">false</span></span>
<span class="line"><span style="color: #F8F8F2">    </span><span style="color: #50FA7B">verify</span><span style="color: #F8F8F2">(exactly </span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2"> </span><span style="color: #BD93F9">1</span><span style="color: #F8F8F2">) { notificatorMock.</span><span style="color: #50FA7B">sendAlert</span><span style="color: #F8F8F2">(</span><span style="color: #50FA7B">alertEvent</span><span style="color: #F8F8F2">(userId </span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2"> </span><span style="color: #BD93F9">15</span><span style="color: #F8F8F2">)) }</span></span>
<span class="line"><span style="color: #F8F8F2">    </span><span style="color: #50FA7B">verify</span><span style="color: #F8F8F2">(exactly </span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2"> </span><span style="color: #BD93F9">1</span><span style="color: #F8F8F2">) { repositoryMock.</span><span style="color: #50FA7B">blockAccount</span><span style="color: #F8F8F2">(userId </span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2"> </span><span style="color: #BD93F9">15</span><span style="color: #F8F8F2">) }</span></span>
<span class="line"><span style="color: #F8F8F2">}</span></span></code></pre>
<p>Effects:</p>
<ul>
<li>Focus on implementation.</li>
<li>Each test checks the logic of a single class in full isolation.</li>
<li>Strongly tied to implementation details -> not resistant to refactoring and SUT changes.</li>
<li>Easy to write - no need to configure dependencies, which may also have dependencies, and so on.</li>
<li>Tests tend to be too granular or even trivial: every bit of logic is tested instead of real operations and commands.</li>
<li>Due to the high granularity, in the case of regression in class A, you will see a single fail at the corresponding location.</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>I hope this article has successfully compiled a range of sources and perspectives into a cohesive material, contributing to a shared understanding of unit testing concepts.</p>
<p>More articles on that topic will be coming soon.
If you have thoughts or suggestions, or if you feel that I’ve made any mistakes in this article, please don’t hesitate to share them with me.</p>
<h2 id="references">References</h2>
<ul>
<li>[1] Vladimir Khorikov, “Unit Testing: Principles, Practices, and Patterns”</li>
<li>[2] <a href="https://martinfowler.com/bliki/UnitTest.html">Martin Fowler, “Unit Test”</a></li>
<li>[3] <a href="https://enterprisecraftsmanship.com/posts/when-to-mock/">Vladimir Khorikov, “When to Mock”</a></li>
<li>Roy Osherove, “The Art of Unit Testing”</li>
<li>Gerard Meszaros, “xUnit Test Patterns: Refactoring Test Code”</li>
</ul></div></article></div><button id="to-top-btn" class="z-90 fixed bottom-8 end-4 flex h-10 w-10 translate-y-28 items-center justify-center rounded-full border-2 border-transparent bg-zinc-200 text-3xl opacity-0 transition-all duration-300 hover:border-zinc-400 data-[show=true]:translate-y-0 data-[show=true]:opacity-100 dark:bg-zinc-700 sm:end-8 sm:h-12 sm:w-12" aria-label="Back to Top" data-show="false"><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M4.5 15.75l7.5-7.5 7.5 7.5"></path></svg></button></main><footer class="mt-auto flex w-full flex-col items-center justify-center gap-y-2 pb-4 pt-20 text-center align-top text-gray-500 sm:flex-row sm:justify-between sm:text-xs"><div class="me-0 sm:me-4">
Copyright &copy; 2024</div><div class="flex flex-wrap items-center gap-x-2 sm:items-center"><ul class="flex flex-1 items-center gap-x-2 sm:flex-initial"><li><a class="inline-block p-2 sm:hover:text-link" href="https://www.github.com/anton-bogomazov" target="_blank" rel="noopener noreferrer"><svg class="h-4 w-4" aria-hidden="true" focusable="false" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M9 19c-4.3 1.4 -4.3 -2.5 -6 -3m12 5v-3.5c0 -1 .1 -1.4 -.5 -2c2.8 -.3 5.5 -1.4 5.5 -6a4.6 4.6 0 0 0 -1.3 -3.2a4.2 4.2 0 0 0 -.1 -3.2s-1.1 -.3 -3.5 1.3a12.3 12.3 0 0 0 -6.2 0c-2.4 -1.6 -3.5 -1.3 -3.5 -1.3a4.2 4.2 0 0 0 -.1 3.2a4.6 4.6 0 0 0 -1.3 3.2c0 4.6 2.7 5.7 5.5 6c-.6 .6 -.6 1.2 -.5 2v3.5"></path></svg><span class="sr-only">Github</span></a></li><li><a class="inline-block p-2 sm:hover:text-link" href="https://www.linkedin.com/in/abogomazov" target="_blank" rel="noopener noreferrer"><svg class="h-4 w-4" aria-hidden="true" focusable="false" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M4 4m0 2a2 2 0 0 1 2 -2h12a2 2 0 0 1 2 2v12a2 2 0 0 1 -2 2h-12a2 2 0 0 1 -2 -2z"></path><path d="M8 11l0 5"></path><path d="M8 8l0 .01"></path><path d="M12 16l0 -5"></path><path d="M16 16v-3a2 2 0 0 0 -4 0"></path></svg><span class="sr-only">LinkedIn</span></a></li><li><a class="inline-block p-2 sm:hover:text-link" href="https://www.t.me/antonbogomazov" target="_blank" rel="noopener noreferrer"><svg class="h-4 w-4" aria-hidden="true" focusable="false" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M15 10l-4 4l6 6l4 -16l-18 7l4 2l2 6l3 -4"></path></svg><span class="sr-only">Telegram</span></a></li><li><a class="inline-block p-2 sm:hover:text-link" href="mailto:abogomazov.dev@gmail.com"><svg class="h-4 w-4" aria-hidden="true" focusable="false" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><rect x="3" y="5" width="18" height="14" rx="2"></rect><polyline points="3 7 12 13 21 7"></polyline></svg><span class="sr-only">Email</span></a></li></ul></div><nav aria-label="More on this site" class="flex gap-x-2 sm:gap-x-0 sm:divide-x sm:divide-gray-500"><a href="/" class="px-4 py-2 sm:px-2 sm:py-0 sm:hover:text-textColor sm:hover:underline">Home</a><a href="/experience" class="px-4 py-2 sm:px-2 sm:py-0 sm:hover:text-textColor sm:hover:underline">Experience</a><a href="/posts/" class="px-4 py-2 sm:px-2 sm:py-0 sm:hover:text-textColor sm:hover:underline">Blog</a></nav></footer></body></html>